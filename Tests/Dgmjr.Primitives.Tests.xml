<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dgmjr.Primitives.Tests</name>
    </assembly>
    <members>
        <member name="M:Dgmjr.Primitives.Tests.iriTests.Regex">
            <remarks>
            Pattern:<br/>
            <code>^(?&lt;Scheme&gt;\r\n        [a-z][a-z0-9+\\-.]*\r\n        )\r\n        :\r\n        (?&lt;DoubleSlashes&gt;\\/\\/)?\r\n        (?&lt;Authority&gt;\r\n            (?:\r\n                (?&lt;UserInfo&gt;\r\n                    (?:\r\n                        %[0-9a-f]{2}|[-._~!$&amp;'()*+,;=:]|[a-z0-9]\r\n                    )*\r\n                )@\r\n            )?\r\n            (?&lt;Host&gt;\r\n                (?:\r\n                    \\[(?:\r\n                        (?:[0-9a-f]{1,4}:){6}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?&lt;=:):(?=:))|::(?:[0-9a-f]{1,4}:){5}(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?&lt;=:):(?=:))|(?:[0-9a-f]{1,4}:)?(?:[0-9a-f]{1,4}:)?(?:[0-9a-f]{1,4}:)?(?:[0-9a-f]{1,4}:)?(?:[0-9a-f]{1,4}:)?[0-9a-f]{1,4}:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4}|(?:[0-9a-f]{1,4}:){1,7}:|:(?:[0-9a-f]{1,4}:){1,7}\r\n                    )\r\n                    (?![0-9a-f])\r\n                )\r\n                |[a-z0-9]+\r\n                (?:[-.][a-z0-9]+)*\r\n            )\r\n            (?:\r\n                \\:\r\n                (?&lt;Port&gt;[0-9]+)\r\n            )?\r\n        )?\r\n        (?&lt;Path&gt;(?:\\/(?:%[0-9a-f]{2}|[-._~!$&amp;'()*+,;=:@\\/]|(?:[a-z0-9]|%[0-9a-f]{2})*)*)*)?\r\n        (?:\r\n            \\?\r\n            (?&lt;Query&gt;\r\n                (?:%[0-9a-f]{2}|[-._~!$&amp;'()*+,;=:@\\/?]|(?:[a-z0-9]|%[0-9a-f]{2})*)*\r\n            )?\r\n        )?\r\n        (?:\r\n            #\r\n            (?&lt;Fragment&gt;\r\n                (?:%[0-9a-f]{2}|[-._~!$&amp;'()*+,;=:@\\/?]|(?:[a-z0-9]|%[0-9a-f]{2})*)*\r\n            )?\r\n        )?$</code><br/>
            Options:<br/>
            <code>RegexOptions.IgnoreCase | RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.IgnorePatternWhitespace</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ "Scheme" capture group.<br/>
                ○ Match a character in the set [A-Za-z\u212A].<br/>
                ○ Match a character in the set [+-.0-9A-Za-z\u212A] atomically any number of times.<br/>
            ○ Match ':'.<br/>
            ○ Optional (greedy).<br/>
                ○ "DoubleSlashes" capture group.<br/>
                    ○ Match the string "//".<br/>
            ○ Optional (greedy).<br/>
                ○ "Authority" capture group.<br/>
                    ○ Optional (greedy).<br/>
                        ○ "UserInfo" capture group.<br/>
                            ○ Loop greedily any number of times.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '%'.<br/>
                                        ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                    ○ Match a character in the set [!$&amp;-.0-;=A-Z_a-z~\u212A].<br/>
                        ○ Match '@'.<br/>
                    ○ "Host" capture group.<br/>
                        ○ Match with 2 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '['.<br/>
                                ○ Match with 5 alternative expressions.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Loop exactly 6 times.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                ○ Match ':'.<br/>
                                                ○ Match a character in the set [0-9A-Fa-f] greedily at least 1 and at most 4 times.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Zero-width positive lookbehind.<br/>
                                                    ○ Match ':' right-to-left.<br/>
                                                ○ Match ':'.<br/>
                                                ○ Zero-width positive lookahead.<br/>
                                                    ○ Match ':'.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match the string "::".<br/>
                                        ○ Loop exactly 5 times.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Match with 2 alternative expressions.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                                ○ Match ':'.<br/>
                                                ○ Match a character in the set [0-9A-Fa-f] greedily at least 1 and at most 4 times.<br/>
                                            ○ Match a sequence of expressions.<br/>
                                                ○ Zero-width positive lookbehind.<br/>
                                                    ○ Match ':' right-to-left.<br/>
                                                ○ Match ':'.<br/>
                                                ○ Zero-width positive lookahead.<br/>
                                                    ○ Match ':'.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Optional (greedy).<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Optional (greedy).<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Optional (greedy).<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Optional (greedy).<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Optional (greedy).<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                        ○ Match ':'.<br/>
                                        ○ Loop greedily at most 2 times.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Match a character in the set [0-9A-Fa-f] greedily at least 1 and at most 4 times.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Loop greedily at least 1 and at most 7 times.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                        ○ Match ':'.<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match ':'.<br/>
                                        ○ Loop greedily at least 1 and at most 7 times.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] atomically at least 1 and at most 4 times.<br/>
                                            ○ Match ':'.<br/>
                                ○ Zero-width negative lookahead.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f].<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match a character in the set [0-9A-Za-z\u212A] greedily at least once.<br/>
                                ○ Loop greedily any number of times.<br/>
                                    ○ Match a character in the set [-.].<br/>
                                    ○ Match a character in the set [0-9A-Za-z\u212A] greedily at least once.<br/>
                    ○ Optional (greedy).<br/>
                        ○ Match ':'.<br/>
                        ○ "Port" capture group.<br/>
                            ○ Match a character in the set [0-9] greedily at least once.<br/>
            ○ Optional (greedy).<br/>
                ○ "Path" capture group.<br/>
                    ○ Loop greedily any number of times.<br/>
                        ○ Match '/'.<br/>
                        ○ Loop greedily any number of times.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '%'.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                ○ Match a character in the set [!$&amp;-/:;=@_~].<br/>
                                ○ Loop greedily any number of times.<br/>
                                    ○ Match with 2 alternative expressions.<br/>
                                        ○ Match a character in the set [0-9A-Za-z\u212A].<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match '%'.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Optional (greedy).<br/>
                ○ Match '?'.<br/>
                ○ Optional (greedy).<br/>
                    ○ "Query" capture group.<br/>
                        ○ Loop greedily any number of times.<br/>
                            ○ Match with 3 alternative expressions.<br/>
                                ○ Match a sequence of expressions.<br/>
                                    ○ Match '%'.<br/>
                                    ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                                ○ Match a character in the set [!$&amp;-/:;=?@_~].<br/>
                                ○ Loop greedily any number of times.<br/>
                                    ○ Match with 2 alternative expressions.<br/>
                                        ○ Match a character in the set [0-9A-Za-z\u212A].<br/>
                                        ○ Match a sequence of expressions.<br/>
                                            ○ Match '%'.<br/>
                                            ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Optional (greedy).<br/>
                ○ "Fragment" capture group.<br/>
                    ○ Loop greedily any number of times.<br/>
                        ○ Match with 3 alternative expressions.<br/>
                            ○ Match a sequence of expressions.<br/>
                                ○ Match '%'.<br/>
                                ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
                            ○ Match a character in the set [!$&amp;-/:;=?@_~].<br/>
                            ○ Loop greedily any number of times.<br/>
                                ○ Match with 2 alternative expressions.<br/>
                                    ○ Match a character in the set [0-9A-Za-z\u212A].<br/>
                                    ○ Match a sequence of expressions.<br/>
                                        ○ Match '%'.<br/>
                                        ○ Match a character in the set [0-9A-Fa-f] exactly 2 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Regex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Regex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Regex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32,System.Int32)">
            <summary>Pushes 3 values onto the backtracking stack.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>
            Gets whether the current repository is dirty.
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>
            => @"false"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.RepositoryUrl">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>
            => @"main"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.CommitDate">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>
            => @"0"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>
            => @"0"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>
            => @"0"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>
            => @"0"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>
            => @"0"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>
            => @"0"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>
            => @"0"
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>
            => @""
            </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>
            => @"Default"
            </summary>
        </member>
    </members>
</doc>
